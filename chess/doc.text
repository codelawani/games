 |  Chess(epd: src.epd.EPDString = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq -')
 |  
 |  Chess Implementation
 |  
 |  Method resolution order:
 |      Chess
 |      src.epd.Game
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, epd: src.epd.EPDString = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq -')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  check_state(self, hash)
 |      Check the state of the chess game based on the current board configuration and move history.
 |      
 |      Args:
 |              hash (str): The hash value of the current board configuration.
 |      
 |      Returns:
 |              str or None: A string indicating the current game state or None if the game is still ongoing. Possible values are:
 |                      * "PP": Pawn promotion
 |                      * "3F": Threefold repetition
 |                      * "50M": Fifty-move rule
 |                      * None: Game is still ongoing.
 |  
 |  display(self)
 |      Display the current state of the chess board using chess characters.
 |  
 |  fifty_move_rule(self, moves, choice=None)
 |      Applies the fifty move rule and allows a player to claim a draw.
 |      
 |      Args:
 |          moves (int): The total number of moves in the game.
 |          choice (str): Whether the player wants to claim a draw or not. Defaults to None.
 |      
 |      Returns:
 |          bool: True if the fifty move rule is triggered and the player chooses to claim a draw. False otherwise.
 |      
 |      
 |      The fifty move rule is a rule in chess that states that a player can claim a draw if no pawn has been moved and no piece has been captured in the last 50 moves. This method checks if the rule is triggered and prompts the player to choose whether they want to claim a draw or not.
 |  
 |  five_fold_rule(self, hash)
 |      Check if the game has reached a five-fold repetition, which is one of the conditions for a draw in chess.
 |      
 |      Args:
 |              hash: a string representing the current position of the chess game in EPD format
 |      
 |      Returns:
 |              - True if the game has reached a five-fold repetition
 |              - False otherwise
 |  
 |  get_cords(self, cord)
 |      Converts chess board coordinates to an array index.
 |      
 |      Args:
 |              cord (tuple or str): A tuple or string containing the chess board coordinates in the format "a1", "b2", etc.
 |      
 |      Returns:
 |              tuple or None: A tuple containing the row and column indexes for the chess board, or None if the input is invalid.
 |      
 |      Example:
 |      >>> game = Chess()
 |      >>> game.get_cords("e4")
 |      (3, 4)
 |  
 |  is_checkmate(self, moves)
 |      Determines if the current board state is a checkmate, indicating the end of the game.
 |      
 |      Args:
 |              moves (dict): A dictionary containing the current possible moves for each piece on the board.
 |      
 |      Returns:
 |              A list containing three elements:
 |                      1. If the game is over (1 if True, 0 if False)
 |                      2. The score for White (an integer)
 |                      3. The score for Black (an integer)
 |      
 |      Raises:
 |              N/A
 |  
 |  is_dead_position(self, moves)
 |      Determine whether the current position is a "dead position" (i.e., a position where neither player can win). A position is a dead position if it is one of the following:
 |      
 |      * King and bishop against king and bishop with both bishops on squares of the same color
 |      * King and knight against king
 |      * King against king with no other pieces on the board
 |      
 |      Args:
 |              moves (int): The current move number.
 |      
 |      Returns:
 |              bool: True if the current position is a dead position, False otherwise.
 |  
 |  is_draw(self, moves, hash)
 |      Checks if the current game state is a draw by applying the following rules in order:
 |      
 |      1. Stalemate - if the current player has no legal moves, it's a draw.
 |      2. Dead position - if a position arises where it is impossible for either player to checkmate the other player's king, it's a draw. (e.g. king and bishop vs. king and bishop where both bishops are on the same color square)
 |      3. Seventy-five move rule - if the last 75 moves (by both players) have been made without any captures or pawn moves, it's a draw.
 |      4. Five-fold repetition rule - if the same position occurs on the board for the fifth time, it's a draw.
 |      5. Fifty-move rule - if the last 50 moves (by both players) have been made without any captures or pawn moves, it's a draw.
 |      6. Three-fold repetition rule - if the same position occurs on the board for the third time, with the same player to move and the same set of legal moves, it's a draw.
 |      
 |      Args:
 |              moves (dict): A dictionary of all legal moves for each piece on the board.
 |              hash (str): A string representing the current state of the board.
 |      
 |      Returns:
 |              bool: True if the current game state is a draw, False otherwise.
 |  
 |  is_end(self)
 |      Determines if the game has ended and returns a list of outcomes [white wins, draw, black wins].
 |      If the game is not over, returns [0, 0, 0].
 |      
 |      Returns:
 |          list: A list of integers representing the outcome of the game.
 |          1. If white wins, the first element is 1, else 0.
 |          2. If the game is a draw, the second element is 1, else 0.
 |          3. If black wins, the third element is 1, else 0.
 |  
 |  is_stalemate(self, moves)
 |      Determines if the current game state is a stalemate.
 |      
 |      A stalemate occurs when the current player is not in check but has no legal move available.
 |      
 |      Args:
 |              moves (dict): A dictionary containing all available moves for each piece on the board.
 |      
 |      Returns:
 |              bool: True if the current game state is a stalemate, False otherwise.
 |  
 |  log_move(self, part, cur_cord, next_cord, cur_pos, next_pos, n_part=None)
 |      Logs the move made by the player into the game's move log.
 |      
 |      Args:
 |              part (int): The integer value of the piece that is being moved.
 |              cur_cord (str): The current coordinates of the piece in algebraic notation (e.g. "a1", "h8").
 |              next_cord (str): The coordinates of the square that the piece is moving to in algebraic notation.
 |              cur_pos (tuple): The current position of the piece on the board as a tuple (x, y) starting from (0,0).
 |              next_pos (tuple): The position of the square that the piece is moving to on the board as a tuple (x, y) starting from (0,0).
 |              n_part (int): The integer value of the promoted piece, if any (optional).
 |      
 |      Returns:
 |              None
 |  
 |  move(self, curr_pos, next_pos)
 |      Move a chess piece from the current position to the next position on the chess board.
 |      
 |      Args:
 |              cur_pos (str): The current position of the chess piece in algebraic notation (e.g. 'e2').
 |              next_pos (str): The desired position of the chess piece in algebraic notation (e.g. 'e4').
 |      
 |      Returns:
 |              bool: True if the move is valid and successful, False otherwise.
 |  
 |  pawn_promotion(self, n_part=None)
 |      Promotes a pawn to another piece.
 |      
 |      Args:
 |              n_part (str): Optional. The notation for the piece to promote to. Can be one of "q", "b", "n", or "r" for queen, bishop, knight, or rook respectively. If None, the user will be prompted to enter a valid option.
 |      
 |      Returns:
 |              bool: True if the pawn was successfully promoted, False otherwise.
 |      
 |      Raises:
 |              None.
 |      
 |      Example:
 |              To promote a pawn to a queen, call the method with the argument "q":
 |      
 |              >>> pawn_promotion("q")
 |  
 |  possible_board_moves(self)
 |      Returns a dictionary of all possible moves on the current board for each piece,
 |      where the key is a string representing the piece's position and the value is a list
 |      of possible next positions.
 |      
 |      Args:
 |              capture (bool):
 |                      if True, include possible capture moves in the returned dictionary;
 |                      if False, only include non-capture moves. Default is True.
 |      
 |      Returns:
 |              A dictionary where the keys represent the position of each piece in algebraic
 |              notation (e.g., 'e2' or 'a7'), and the values are lists of tuples representing
 |              the possible next positions for that piece. The tuples represent the next position
 |              in (x, y) format, where x and y are integers corresponding to the column and row
 |              of the board, respectively.
 |  
 |  reset(self, epd: src.epd.EPDString)
 |      Resets the Chess game to its initial state.
 |      
 |      Args:
 |          epd (str): The EPD string representing the starting position of the game. Defaults to the standard starting position.
 |      
 |      Returns:
 |          None
 |      
 |      The method resets the game state by resetting the game log, EPD hashtable, current player's move, castling control, en passant control, previous move, and board. The method then loads in the EPD string to set the game to its starting position.
 |  
 |  seventy_five_move_rule(self, moves)
 |                      Checks if the 75-move rule has been met. According to this rule, a player can claim a draw if the last 150 moves
 |      have been made without any pawn move or any capture.
 |      
 |                      Args:
 |                              moves (int): The number of moves made so far in the game.
 |      
 |                      Returns:
 |                              bool: True if the 75-move rule has been met and a draw can be claimed. False otherwise.
 |  
 |  three_fold_rule(self, hash)
 |      Check if the current position has occurred three times, and prompt the user to claim a draw if it has.
 |      
 |      Args:
 |              hash (int): The hash value of the current board position.
 |      
 |      Returns:
 |              bool: True if the user claims a draw, False otherwise.
 |  
 |  valid_move(self, cur_pos, next_pos)
 |      Check if a move from current position to the next position is valid.
 |      
 |      Args:
 |              cur_pos (tuple): A tuple of two integers representing the current position on the board in (row, column) format.
 |              next_pos (tuple): A tuple of two integers representing the next position on the board in (row, column) format.
 |      
 |      Returns:
 |              bool: True if the move is valid, False otherwise.
 |  
 |  
 |  
 |
 |  switch_player(self)
 |      Switch player.
 |  
 |  
 |  
 |  en_passant = None
 |  
 |  p_move = 1

